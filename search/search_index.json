{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to StressSimple","text":""},{"location":"#what-is-stresssimple","title":"What is StressSimple?","text":"<p>StressSimple is a robust and user-friendly stress testing solution designed for web applications. It empowers developers and testers to evaluate the performance of their web applications under heavy load conditions with ease and precision.</p> <p>Built using TypeScript and Svelte, StressSimple operates seamlessly on Node.js. It is an open-source, free-to-use tool that prioritizes simplicity and efficiency. </p>"},{"location":"#github-repository","title":"GitHub Repository","text":"<p>Here is the link to the GitHub repository: StressSimple</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Ease of Use: Write simple scripts in TypeScript or Python to define test scenarios.</li> <li>Real-Time Insights: Monitor performance metrics in real-time during tests.</li> <li>Cross-Platform: Run on Docker or install locally for maximum flexibility.</li> <li>Open Source: Free to use and contribute to.</li> </ul>"},{"location":"#visual-overview","title":"Visual Overview","text":"<p>Take a glimpse at StressSimple in action:</p> <p> </p>"},{"location":"#how-does-it-work","title":"How Does It Work?","text":"<ol> <li>Define Your Test Scenario: Write a simple script in TypeScript or Python to simulate user behavior.</li> <li>Execute the Test: Run the script against your web application using the StressSimple platform.</li> <li>Analyze Results: Receive real-time performance metrics and detailed insights to optimize your application.</li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To begin using StressSimple, you can either run the application via Docker or install it locally. Refer to the installation guide for step-by-step instructions.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Clone the repository:     <pre><code>git clone https://github.com/stresssimple/stresssimple.git\n</code></pre></li> <li>Start the application:     <pre><code>npm run compose:up:app\n</code></pre></li> </ol> <p>Once the application is running, navigate to <code>http://localhost:5000</code> to explore sample tests or create your own. For detailed usage instructions, visit the user guide.</p>"},{"location":"#core-component-stress-scripts","title":"Core Component: Stress Scripts","text":"<p>The heart of StressSimple lies in its stress scripts. These scripts, written in either TypeScript or Python, define the test scenarios and execute them against your web application. Learn how to create your own scripts in the user guide.</p> <p>Explore stress script examples to see sample scripts in action and kickstart your testing journey.</p> <p>StressSimple is your go-to solution for ensuring your web applications perform flawlessly under pressure. Start testing today and deliver exceptional user experiences!</p>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#quick-start","title":"Quick Start","text":"<p>To install StressSimple, execute the following commands:</p> <pre><code>git clone https://github.com/your-repo/stresssimple.git\ncd stresssimple\nnpm run compose:up:app\n</code></pre> <p>This will clone the repository, navigate to the project directory, and initialize the necessary Docker containers.</p> <p>Once the setup is complete, you can access the StressSimple dashboard at http://localhost:5000.</p>"},{"location":"installation/#detailed-instructions","title":"Detailed Instructions","text":"<p>The repository includes three Docker Compose files:</p> <ol> <li><code>docker-compose.infra.yml</code>: Manages infrastructure services required for the application:<ul> <li>InfluxDB: A time-series database for storing test results.</li> <li>MySQL: A relational database for user data.</li> </ul> </li> <li><code>docker-compose.app.yml</code>: Deploys the StressSimple application using pre-built images from <code>ghcr.io</code>.</li> <li><code>docker-compose.dev.yml</code>: Builds and runs Docker containers directly from the source code.</li> </ol> <p>To start the application, use one of the following commands:</p> <pre><code>npm run compose:up:app \n# or for development\nnpm run compose:build\nnpm run compose:up\n</code></pre>"},{"location":"installation/#local-development-setup","title":"Local Development Setup","text":"<p>Follow these steps to run the application locally:</p> <ol> <li>Clone the repository.</li> <li>Navigate to the project directory.</li> <li>Install dependencies using <code>npm install</code>.</li> <li>Start the required services with <code>npm run compose:up:infra</code>.</li> <li>Launch the backend with <code>npm start:backend</code>.</li> <li>Launch the frontend with <code>npm start:front</code>.</li> </ol> <p>The StressSimple dashboard will be available at http://localhost:5173/.</p>"},{"location":"installation/#uninstalling-stresssimple","title":"Uninstalling StressSimple","text":"<p>To remove the application and its associated containers, run:</p> <pre><code>npm run compose:delete\n</code></pre> <p>Warning: This will permanently delete all data stored in the databases. Installation Guide</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>This guide provides a comprehensive example of how to use the StressSimple application effectively.</p>"},{"location":"user-guide/#how-it-works","title":"How It Works","text":"<p>To perform stress testing, you need to create a class named <code>Test</code> that extends the <code>StressTest</code> base class. This class is responsible for sending HTTP requests during the stress test. The <code>Test</code> class must implement the <code>test</code> method, which defines the logic for sending HTTP requests. Optionally, you can implement the <code>interval</code> method to specify the time interval (in milliseconds) between consecutive tests.</p>"},{"location":"user-guide/#key-points","title":"Key Points:","text":"<ul> <li>The <code>test</code> method is invoked repeatedly by the application to send HTTP requests to the server.</li> <li>The <code>interval</code> method specifies the interval between consecutive tests in milliseconds. If not implemented, the default interval is 1000 milliseconds.</li> <li>A test is considered a failure if an exception is thrown during the execution of the <code>test</code> method.</li> </ul>"},{"location":"user-guide/#sample-test-script","title":"Sample Test Script","text":"<pre><code>import { StressTest } from './StressTest.js';\n\n/**\n * A sample test class that extends the StressTest base class.\n * This class demonstrates how to perform stress testing by sending HTTP requests to a server.\n */\nexport class Test extends StressTest {\n  // Counter to track the number of requests made\n  private request: number = 1;\n\n  // HTTP client instance configured with the base URL\n  private cli = this.http\n    .baseUrl('http://localhost:3333') // Stub server URL\n    // .header('x-stub-delay', '100') // Uncomment to add a delay to all requests\n    .create();\n\n  /**\n   * Executes the test by sending an HTTP GET request to the server.\n   * @param userId - A unique identifier for the user performing the test.\n   */\n  public async test(userId: string): Promise&lt;void&gt; {\n    // Uncomment the following line for debugging purposes\n    // console.log(\"Test with \" + userId + ' request number ' + this.request++);\n\n    // Send an HTTP GET request to the server\n    await this.cli\n      .get('/some-endpoint')\n      // Uncomment to send other types of requests\n      // .post('Post request', { userId: userId })\n      // .put('Put request', { userId: userId })\n      .header('userId', userId)\n      .name('stub server')\n      .send();\n  }\n\n  /**\n   * Specifies the interval between consecutive tests in milliseconds.\n   * @returns The interval duration in milliseconds.\n   */\n  public interval(): number {\n    return 10;\n  }\n}\n</code></pre>"},{"location":"user-guide/#test-execution","title":"Test Execution","text":""},{"location":"user-guide/#test-execution-settings","title":"Test Execution Settings","text":"<ul> <li>Number of Users: The number of users to simulate.</li> <li>Duration: The duration of the test in seconds.</li> <li>Ramp-Up Time: The time in seconds to gradually increase to the specified number of users.</li> <li>Processes: The number of processes across running agents to use for the test execution.</li> </ul>"},{"location":"user-guide/#screen-actions","title":"Screen Actions","text":"<ul> <li>Click the <code>Schedule</code> button to start a test execution.</li> </ul>"},{"location":"user-guide/#test-actions","title":"Test actions","text":"<ul> <li>Click the <code>Stop</code> button to cancel a running test execution.</li> <li>Click the <code>Delete</code> button to remove a test execution.</li> <li>Click on a test execution row to view detailed results.</li> </ul>"},{"location":"user-guide/#test-results","title":"Test Results","text":""},{"location":"user-guide/#overview","title":"Overview","text":"<ul> <li>This screen provides a real-time graphical representation of the test results.</li> </ul>"},{"location":"user-guide/#logs","title":"Logs","text":"<ul> <li>Open the \"Logs\" tab to view <code>console.log</code> or <code>print</code> messages generated during the test execution.</li> </ul>"},{"location":"user-guide/#audit","title":"Audit","text":"<ul> <li>The \"Audit\" section displays detailed information about the HTTP requests sent during the test execution.</li> </ul>"}]}